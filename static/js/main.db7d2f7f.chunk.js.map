{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ArmyBubble","styled","div","ArmyEmoji","img","HeaderContainer","VideoCanvasContainer","StyledVideo","video","StyledCanvas","canvas","DescriptionContainer","Description","App","videoRef","React","createRef","canvasRef","detectFrame","model","detect","score","iou","topk","then","predictions","renderPredictions","requestAnimationFrame","ctx","current","getContext","clearRect","width","height","font","textBaseline","forEach","prediction","x","box","left","y","top","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","automl","all","values","catch","error","console","videoAndCanvasHeight","innerHeight","videoAndCanvasWidth","innerWidth","src","autoPlay","playsInline","muted","ref","this","role","aria-label","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db7d2f7f.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport \"@tensorflow/tfjs\";\nimport * as automl from \"@tensorflow/tfjs-automl\";\n\nconst ArmyBubble = styled.div`\n  display: flex;\n  background: rgba(255, 255, 255, 0.8);\n  max-width: 50vw;\n  height: 50px;\n  font-weight: bold;\n  border-radius: 15px;\n  text-align: center;\n  align-items: center;\n`;\n\nconst ArmyEmoji = styled.img`\n  height: 80px;\n  width: 80px;\n  margin-right: 0.7rem;\n`;\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-start;\n  padding: 1rem 1rem;\n  position: fixed;\n  z-index: 2;\n  align-items: center;\n`;\n\nconst VideoCanvasContainer = styled.div`\n  height: 100%;\n  overflow: hidden;\n  width: 100%;\n`;\n\nconst StyledVideo = styled.video`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n`;\n\nconst StyledCanvas = styled.canvas`\n  position: fixed;\n  top: 0;\n  left: 0;\n`;\n\nconst DescriptionContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  position: fixed;\n  z-index: 2;\n  bottom: 2rem;\n`;\n\nconst Description = styled.div`\n  background: rgba(255, 255, 255, 0.8);\n  max-width: 60vw;\n  font-weight: bold;\n  border-radius: 15px;\n  text-align: center;\n  padding: 0.5rem;\n`;\n\nconst modelUrl = \"edge_best_tradeoff/model.json\"; // URL to the model.json file.\n\nclass App extends React.Component {\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"environment\"\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      // const modelPromise = cocoSsd.load();\n      const modelPromise = automl.loadObjectDetection(modelUrl);\n      Promise.all([modelPromise, webCamPromise])\n        .then(values => {\n          this.detectFrame(this.videoRef.current, values[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  detectFrame = (video, model) => {\n    const options = { score: 0.917, iou: 0.5, topk: 1 };\n    model.detect(video, options).then(predictions => {\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  };\n\n  renderPredictions = predictions => {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.box.left;\n      const y = prediction.box.top;\n      const width = prediction.box.width;\n      const height = prediction.box.height;\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#326B33\";\n      ctx.lineWidth = 4;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#326B33\";\n      const textWidth = ctx.measureText(\"Kamuflert flaske\").width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.box.left;\n      const y = prediction.box.top;\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(\"Kamuflert flaske\", x, y);\n    });\n  };\n\n  render() {\n    const videoAndCanvasHeight = window.innerHeight;\n    const videoAndCanvasWidth = window.innerWidth;\n    return (\n      <div>\n        <HeaderContainer>\n          <ArmyEmoji src=\"army_emoji3.png\"></ArmyEmoji>\n          <ArmyBubble>Jeg har militÃ¦rbakgrunn!</ArmyBubble>\n        </HeaderContainer>\n        <VideoCanvasContainer>\n          <StyledVideo autoPlay playsInline muted ref={this.videoRef} />\n        </VideoCanvasContainer>\n        <StyledCanvas\n          ref={this.canvasRef}\n          width={videoAndCanvasWidth}\n          height={videoAndCanvasHeight}\n        />\n        <DescriptionContainer>\n          <Description>\n            Pek meg rundt omkring, og jeg vil finne flasken for deg\n            <span role=\"img\" aria-label=\"nerd emoji\">\n              ðŸ¤“\n            </span>\n          </Description>\n        </DescriptionContainer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}